
// Code generated by stanc v2.29.0
#include <stan/model/model_header.hpp>
namespace posterior_model_namespace {

using stan::model::model_base_crtp;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 88> locations_array__ = 
{" (found before start of program)",
 " (in '/home/ProjektDataAnalytics/posterior.stan', line 17, column 3 to column 29)",
 " (in '/home/ProjektDataAnalytics/posterior.stan', line 18, column 4 to column 34)",
 " (in '/home/ProjektDataAnalytics/posterior.stan', line 22, column 4 to column 19)",
 " (in '/home/ProjektDataAnalytics/posterior.stan', line 31, column 4 to column 23)",
 " (in '/home/ProjektDataAnalytics/posterior.stan', line 40, column 4 to column 54)",
 " (in '/home/ProjektDataAnalytics/posterior.stan', line 41, column 4 to column 19)",
 " (in '/home/ProjektDataAnalytics/posterior.stan', line 24, column 8 to column 22)",
 " (in '/home/ProjektDataAnalytics/posterior.stan', line 26, column 12 to column 100)",
 " (in '/home/ProjektDataAnalytics/posterior.stan', line 25, column 23 to line 27, column 9)",
 " (in '/home/ProjektDataAnalytics/posterior.stan', line 25, column 8 to line 27, column 9)",
 " (in '/home/ProjektDataAnalytics/posterior.stan', line 28, column 8 to column 67)",
 " (in '/home/ProjektDataAnalytics/posterior.stan', line 23, column 28 to line 29, column 5)",
 " (in '/home/ProjektDataAnalytics/posterior.stan', line 23, column 4 to line 29, column 5)",
 " (in '/home/ProjektDataAnalytics/posterior.stan', line 33, column 8 to column 26)",
 " (in '/home/ProjektDataAnalytics/posterior.stan', line 35, column 12 to column 85)",
 " (in '/home/ProjektDataAnalytics/posterior.stan', line 34, column 23 to line 36, column 9)",
 " (in '/home/ProjektDataAnalytics/posterior.stan', line 34, column 8 to line 36, column 9)",
 " (in '/home/ProjektDataAnalytics/posterior.stan', line 37, column 8 to column 46)",
 " (in '/home/ProjektDataAnalytics/posterior.stan', line 32, column 28 to line 38, column 5)",
 " (in '/home/ProjektDataAnalytics/posterior.stan', line 32, column 4 to line 38, column 5)",
 " (in '/home/ProjektDataAnalytics/posterior.stan', line 43, column 8 to column 22)",
 " (in '/home/ProjektDataAnalytics/posterior.stan', line 45, column 12 to column 66)",
 " (in '/home/ProjektDataAnalytics/posterior.stan', line 44, column 23 to line 46, column 9)",
 " (in '/home/ProjektDataAnalytics/posterior.stan', line 44, column 8 to line 46, column 9)",
 " (in '/home/ProjektDataAnalytics/posterior.stan', line 47, column 8 to column 38)",
 " (in '/home/ProjektDataAnalytics/posterior.stan', line 42, column 28 to line 48, column 5)",
 " (in '/home/ProjektDataAnalytics/posterior.stan', line 42, column 4 to line 48, column 5)",
 " (in '/home/ProjektDataAnalytics/posterior.stan', line 58, column 4 to column 24)",
 " (in '/home/ProjektDataAnalytics/posterior.stan', line 59, column 4 to column 34)",
 " (in '/home/ProjektDataAnalytics/posterior.stan', line 61, column 8 to column 27)",
 " (in '/home/ProjektDataAnalytics/posterior.stan', line 63, column 12 to column 103)",
 " (in '/home/ProjektDataAnalytics/posterior.stan', line 62, column 23 to line 64, column 9)",
 " (in '/home/ProjektDataAnalytics/posterior.stan', line 62, column 8 to line 64, column 9)",
 " (in '/home/ProjektDataAnalytics/posterior.stan', line 65, column 8 to column 71)",
 " (in '/home/ProjektDataAnalytics/posterior.stan', line 66, column 8 to column 58)",
 " (in '/home/ProjektDataAnalytics/posterior.stan', line 60, column 27 to line 67, column 5)",
 " (in '/home/ProjektDataAnalytics/posterior.stan', line 60, column 4 to line 67, column 5)",
 " (in '/home/ProjektDataAnalytics/posterior.stan', line 69, column 4 to column 28)",
 " (in '/home/ProjektDataAnalytics/posterior.stan', line 70, column 4 to column 38)",
 " (in '/home/ProjektDataAnalytics/posterior.stan', line 72, column 8 to column 31)",
 " (in '/home/ProjektDataAnalytics/posterior.stan', line 74, column 12 to column 89)",
 " (in '/home/ProjektDataAnalytics/posterior.stan', line 73, column 23 to line 75, column 9)",
 " (in '/home/ProjektDataAnalytics/posterior.stan', line 73, column 8 to line 75, column 9)",
 " (in '/home/ProjektDataAnalytics/posterior.stan', line 76, column 8 to column 51)",
 " (in '/home/ProjektDataAnalytics/posterior.stan', line 77, column 8 to column 66)",
 " (in '/home/ProjektDataAnalytics/posterior.stan', line 71, column 27 to line 78, column 5)",
 " (in '/home/ProjektDataAnalytics/posterior.stan', line 71, column 4 to line 78, column 5)",
 " (in '/home/ProjektDataAnalytics/posterior.stan', line 80, column 4 to column 68)",
 " (in '/home/ProjektDataAnalytics/posterior.stan', line 81, column 4 to column 24)",
 " (in '/home/ProjektDataAnalytics/posterior.stan', line 82, column 4 to column 43)",
 " (in '/home/ProjektDataAnalytics/posterior.stan', line 84, column 8 to column 27)",
 " (in '/home/ProjektDataAnalytics/posterior.stan', line 86, column 12 to column 76)",
 " (in '/home/ProjektDataAnalytics/posterior.stan', line 85, column 23 to line 87, column 9)",
 " (in '/home/ProjektDataAnalytics/posterior.stan', line 85, column 8 to line 87, column 9)",
 " (in '/home/ProjektDataAnalytics/posterior.stan', line 88, column 8 to column 43)",
 " (in '/home/ProjektDataAnalytics/posterior.stan', line 89, column 8 to column 61)",
 " (in '/home/ProjektDataAnalytics/posterior.stan', line 83, column 27 to line 90, column 5)",
 " (in '/home/ProjektDataAnalytics/posterior.stan', line 83, column 4 to line 90, column 5)",
 " (in '/home/ProjektDataAnalytics/posterior.stan', line 52, column 4 to column 37)",
 " (in '/home/ProjektDataAnalytics/posterior.stan', line 53, column 4 to column 45)",
 " (in '/home/ProjektDataAnalytics/posterior.stan', line 54, column 4 to column 44)",
 " (in '/home/ProjektDataAnalytics/posterior.stan', line 2, column 4 to column 28)",
 " (in '/home/ProjektDataAnalytics/posterior.stan', line 3, column 4 to column 27)",
 " (in '/home/ProjektDataAnalytics/posterior.stan', line 4, column 10 to column 20)",
 " (in '/home/ProjektDataAnalytics/posterior.stan', line 4, column 4 to column 43)",
 " (in '/home/ProjektDataAnalytics/posterior.stan', line 5, column 10 to column 20)",
 " (in '/home/ProjektDataAnalytics/posterior.stan', line 5, column 4 to column 47)",
 " (in '/home/ProjektDataAnalytics/posterior.stan', line 6, column 10 to column 20)",
 " (in '/home/ProjektDataAnalytics/posterior.stan', line 6, column 4 to column 40)",
 " (in '/home/ProjektDataAnalytics/posterior.stan', line 7, column 10 to column 20)",
 " (in '/home/ProjektDataAnalytics/posterior.stan', line 7, column 4 to column 47)",
 " (in '/home/ProjektDataAnalytics/posterior.stan', line 8, column 4 to column 35)",
 " (in '/home/ProjektDataAnalytics/posterior.stan', line 9, column 4 to column 36)",
 " (in '/home/ProjektDataAnalytics/posterior.stan', line 10, column 4 to column 32)",
 " (in '/home/ProjektDataAnalytics/posterior.stan', line 11, column 10 to column 19)",
 " (in '/home/ProjektDataAnalytics/posterior.stan', line 11, column 4 to column 45)",
 " (in '/home/ProjektDataAnalytics/posterior.stan', line 12, column 10 to column 19)",
 " (in '/home/ProjektDataAnalytics/posterior.stan', line 12, column 4 to column 38)",
 " (in '/home/ProjektDataAnalytics/posterior.stan', line 13, column 10 to column 19)",
 " (in '/home/ProjektDataAnalytics/posterior.stan', line 13, column 4 to column 45)",
 " (in '/home/ProjektDataAnalytics/posterior.stan', line 17, column 10 to column 20)",
 " (in '/home/ProjektDataAnalytics/posterior.stan', line 18, column 11 to column 21)",
 " (in '/home/ProjektDataAnalytics/posterior.stan', line 40, column 11 to column 21)",
 " (in '/home/ProjektDataAnalytics/posterior.stan', line 59, column 11 to column 20)",
 " (in '/home/ProjektDataAnalytics/posterior.stan', line 70, column 11 to column 20)",
 " (in '/home/ProjektDataAnalytics/posterior.stan', line 80, column 11 to column 20)",
 " (in '/home/ProjektDataAnalytics/posterior.stan', line 82, column 10 to column 19)"};




class posterior_model final : public model_base_crtp<posterior_model> {

 private:
  int N_historic;
  int N_predict;
  std::vector<double> prices_historic;
  std::vector<int> day_of_week_historic;
  std::vector<int> hour_historic;
  std::vector<double> wind_speed_historic;
  std::vector<std::vector<double>> coeffs_demand;
  std::vector<double> coeffs_generation;
  std::vector<double> coeffs_prices;
  std::vector<int> day_of_week_predict;
  std::vector<int> hour_predict;
  std::vector<double> wind_speed_predict; 
  
 
 public:
  ~posterior_model() { }
  
  inline std::string model_name() const final { return "posterior_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.29.0", "stancflags = "};
  }
  
  
  posterior_model(stan::io::var_context& context__,
                  unsigned int random_seed__ = 0,
                  std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "posterior_model_namespace::posterior_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 62;
      context__.validate_dims("data initialization","N_historic","int",
           std::vector<size_t>{});
      N_historic = std::numeric_limits<int>::min();
      
      
      current_statement__ = 62;
      N_historic = context__.vals_i("N_historic")[(1 - 1)];
      current_statement__ = 62;
      stan::math::check_greater_or_equal(function__, "N_historic",
                                            N_historic, 0);
      current_statement__ = 63;
      context__.validate_dims("data initialization","N_predict","int",
           std::vector<size_t>{});
      N_predict = std::numeric_limits<int>::min();
      
      
      current_statement__ = 63;
      N_predict = context__.vals_i("N_predict")[(1 - 1)];
      current_statement__ = 63;
      stan::math::check_greater_or_equal(function__, "N_predict", N_predict,
                                            0);
      current_statement__ = 64;
      stan::math::validate_non_negative_index("prices_historic",
                                              "N_historic", N_historic);
      current_statement__ = 65;
      context__.validate_dims("data initialization","prices_historic",
          "double", std::vector<size_t>{static_cast<size_t>(N_historic)});
      prices_historic = 
        std::vector<double>(N_historic, 
          std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 65;
      prices_historic = context__.vals_r("prices_historic");
      current_statement__ = 66;
      stan::math::validate_non_negative_index("day_of_week_historic",
                                              "N_historic", N_historic);
      current_statement__ = 67;
      context__.validate_dims("data initialization","day_of_week_historic",
          "int", std::vector<size_t>{static_cast<size_t>(N_historic)});
      day_of_week_historic = 
        std::vector<int>(N_historic, std::numeric_limits<int>::min());
      
      
      current_statement__ = 67;
      day_of_week_historic = context__.vals_i("day_of_week_historic");
      current_statement__ = 68;
      stan::math::validate_non_negative_index("hour_historic", "N_historic",
                                              N_historic);
      current_statement__ = 69;
      context__.validate_dims("data initialization","hour_historic","int",
           std::vector<size_t>{static_cast<size_t>(N_historic)});
      hour_historic = 
        std::vector<int>(N_historic, std::numeric_limits<int>::min());
      
      
      current_statement__ = 69;
      hour_historic = context__.vals_i("hour_historic");
      current_statement__ = 70;
      stan::math::validate_non_negative_index("wind_speed_historic",
                                              "N_historic", N_historic);
      current_statement__ = 71;
      context__.validate_dims("data initialization","wind_speed_historic",
          "double", std::vector<size_t>{static_cast<size_t>(N_historic)});
      wind_speed_historic = 
        std::vector<double>(N_historic, 
          std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 71;
      wind_speed_historic = context__.vals_r("wind_speed_historic");
      current_statement__ = 72;
      context__.validate_dims("data initialization","coeffs_demand","double",
           std::vector<size_t>{static_cast<size_t>(7),
            static_cast<size_t>(6)});
      coeffs_demand = 
        std::vector<std::vector<double>>(7, 
          std::vector<double>(6, std::numeric_limits<double>::quiet_NaN()));
      
      
      {
        std::vector<local_scalar_t__> coeffs_demand_flat__;
        current_statement__ = 72;
        coeffs_demand_flat__ = context__.vals_r("coeffs_demand");
        current_statement__ = 72;
        pos__ = 1;
        current_statement__ = 72;
        for (int sym1__ = 1; sym1__ <= 6; ++sym1__) {
          current_statement__ = 72;
          for (int sym2__ = 1; sym2__ <= 7; ++sym2__) {
            current_statement__ = 72;
            stan::model::assign(coeffs_demand,
              coeffs_demand_flat__[(pos__ - 1)],
              "assigning variable coeffs_demand", stan::model::index_uni(sym2__),
                                                    stan::model::index_uni(sym1__));
            current_statement__ = 72;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 73;
      context__.validate_dims("data initialization","coeffs_generation",
          "double", std::vector<size_t>{static_cast<size_t>(4)});
      coeffs_generation = 
        std::vector<double>(4, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 73;
      coeffs_generation = context__.vals_r("coeffs_generation");
      current_statement__ = 74;
      context__.validate_dims("data initialization","coeffs_prices","double",
           std::vector<size_t>{static_cast<size_t>(8)});
      coeffs_prices = 
        std::vector<double>(8, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 74;
      coeffs_prices = context__.vals_r("coeffs_prices");
      current_statement__ = 75;
      stan::math::validate_non_negative_index("day_of_week_predict",
                                              "N_predict", N_predict);
      current_statement__ = 76;
      context__.validate_dims("data initialization","day_of_week_predict",
          "int", std::vector<size_t>{static_cast<size_t>(N_predict)});
      day_of_week_predict = 
        std::vector<int>(N_predict, std::numeric_limits<int>::min());
      
      
      current_statement__ = 76;
      day_of_week_predict = context__.vals_i("day_of_week_predict");
      current_statement__ = 77;
      stan::math::validate_non_negative_index("hour_predict", "N_predict",
                                              N_predict);
      current_statement__ = 78;
      context__.validate_dims("data initialization","hour_predict","int",
           std::vector<size_t>{static_cast<size_t>(N_predict)});
      hour_predict = 
        std::vector<int>(N_predict, std::numeric_limits<int>::min());
      
      
      current_statement__ = 78;
      hour_predict = context__.vals_i("hour_predict");
      current_statement__ = 79;
      stan::math::validate_non_negative_index("wind_speed_predict",
                                              "N_predict", N_predict);
      current_statement__ = 80;
      context__.validate_dims("data initialization","wind_speed_predict",
          "double", std::vector<size_t>{static_cast<size_t>(N_predict)});
      wind_speed_predict = 
        std::vector<double>(N_predict, 
          std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 80;
      wind_speed_predict = context__.vals_r("wind_speed_predict");
      current_statement__ = 81;
      stan::math::validate_non_negative_index("demand", "N_historic",
                                              N_historic);
      current_statement__ = 82;
      stan::math::validate_non_negative_index("generation", "N_historic",
                                              N_historic);
      current_statement__ = 83;
      stan::math::validate_non_negative_index("residual", "N_historic",
                                              N_historic);
      current_statement__ = 84;
      stan::math::validate_non_negative_index("demand_post", "N_predict",
                                              N_predict);
      current_statement__ = 85;
      stan::math::validate_non_negative_index("generation_post", "N_predict",
                                              N_predict);
      current_statement__ = 86;
      stan::math::validate_non_negative_index("residual_post", "N_predict",
                                              N_predict);
      current_statement__ = 87;
      stan::math::validate_non_negative_index("posterior_prices",
                                              "N_predict", N_predict);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = N_historic + N_historic;
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "posterior_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      Eigen::Matrix<local_scalar_t__, -1, 1> demand =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(N_historic,
           DUMMY_VAR__);
      current_statement__ = 1;
      demand = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(
                 N_historic);
      Eigen::Matrix<local_scalar_t__, -1, 1> generation =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(N_historic,
           DUMMY_VAR__);
      current_statement__ = 2;
      generation = in__.template read<
                     Eigen::Matrix<local_scalar_t__, -1, 1>>(N_historic);
      local_scalar_t__ mu_demand = DUMMY_VAR__;
      current_statement__ = 13;
      for (int i = 1; i <= N_historic; ++i) {
        current_statement__ = 7;
        mu_demand = 0;
        current_statement__ = 10;
        for (int j = 1; j <= 5; ++j) {
          current_statement__ = 8;
          mu_demand = (mu_demand +
                        (stan::model::rvalue(
                           stan::model::rvalue(coeffs_demand, "coeffs_demand",
  stan::model::index_uni((stan::model::rvalue(day_of_week_historic,
                            "day_of_week_historic",
                            stan::model::index_uni(i)) + 1))),
                           "coeffs_demand[(day_of_week_historic[i] + 1)]",
                           stan::model::index_uni(j)) *
                          stan::math::pow(
                            stan::model::rvalue(hour_historic,
                              "hour_historic", stan::model::index_uni(i)),
                            (6 - j))));
        }
        current_statement__ = 11;
        mu_demand = (mu_demand +
                      stan::model::rvalue(
                        stan::model::rvalue(coeffs_demand, "coeffs_demand",
  stan::model::index_uni((stan::model::rvalue(day_of_week_historic,
                            "day_of_week_historic",
                            stan::model::index_uni(i)) + 1))),
                        "coeffs_demand[(day_of_week_historic[i] + 1)]",
                        stan::model::index_uni(6)));
      }
      local_scalar_t__ mu_generation = DUMMY_VAR__;
      current_statement__ = 20;
      for (int i = 1; i <= N_historic; ++i) {
        current_statement__ = 14;
        mu_generation = 0;
        current_statement__ = 17;
        for (int j = 1; j <= 3; ++j) {
          current_statement__ = 15;
          mu_generation = (mu_generation +
                            (stan::model::rvalue(coeffs_generation,
                               "coeffs_generation",
                               stan::model::index_uni(j)) *
                              stan::math::pow(
                                stan::model::rvalue(wind_speed_historic,
                                  "wind_speed_historic",
                                  stan::model::index_uni(i)), (4 - j))));
        }
        current_statement__ = 18;
        mu_generation = (mu_generation +
                          stan::model::rvalue(coeffs_generation,
                            "coeffs_generation", stan::model::index_uni(4)));
      }
      Eigen::Matrix<local_scalar_t__, -1, 1> residual =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(N_historic,
           DUMMY_VAR__);
      current_statement__ = 5;
      stan::model::assign(residual, stan::math::subtract(demand, generation),
        "assigning variable residual");
      local_scalar_t__ mu_prices = DUMMY_VAR__;
      current_statement__ = 27;
      for (int i = 1; i <= N_historic; ++i) {
        current_statement__ = 21;
        mu_prices = 0;
        current_statement__ = 24;
        for (int j = 1; j <= 7; ++j) {
          current_statement__ = 22;
          mu_prices = (mu_prices +
                        (stan::model::rvalue(coeffs_prices, "coeffs_prices",
                           stan::model::index_uni(j)) *
                          stan::math::pow(
                            stan::model::rvalue(residual, "residual",
                              stan::model::index_uni(i)), (8 - j))));
        }
        current_statement__ = 25;
        mu_prices = (mu_prices +
                      stan::model::rvalue(coeffs_prices, "coeffs_prices",
                        stan::model::index_uni(8)));
      }
      {
        current_statement__ = 59;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(demand, mu_demand, 2800));
        current_statement__ = 60;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(generation, mu_generation, 1400));
        current_statement__ = 61;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(prices_historic, mu_prices, 60));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    (void) propto__;
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "posterior_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      Eigen::Matrix<double, -1, 1> demand =
         Eigen::Matrix<double, -1, 1>::Constant(N_historic,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 1;
      demand = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(
                 N_historic);
      Eigen::Matrix<double, -1, 1> generation =
         Eigen::Matrix<double, -1, 1>::Constant(N_historic,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 2;
      generation = in__.template read<
                     Eigen::Matrix<local_scalar_t__, -1, 1>>(N_historic);
      double mu_demand = std::numeric_limits<double>::quiet_NaN();
      double mu_generation = std::numeric_limits<double>::quiet_NaN();
      Eigen::Matrix<double, -1, 1> residual =
         Eigen::Matrix<double, -1, 1>::Constant(N_historic,
           std::numeric_limits<double>::quiet_NaN());
      double mu_prices = std::numeric_limits<double>::quiet_NaN();
      out__.write(demand);
      out__.write(generation);
      if (stan::math::logical_negation((stan::math::primitive_value(
            emit_transformed_parameters__) || stan::math::primitive_value(
            emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 13;
      for (int i = 1; i <= N_historic; ++i) {
        current_statement__ = 7;
        mu_demand = 0;
        current_statement__ = 10;
        for (int j = 1; j <= 5; ++j) {
          current_statement__ = 8;
          mu_demand = (mu_demand +
                        (stan::model::rvalue(
                           stan::model::rvalue(coeffs_demand, "coeffs_demand",
  stan::model::index_uni((stan::model::rvalue(day_of_week_historic,
                            "day_of_week_historic",
                            stan::model::index_uni(i)) + 1))),
                           "coeffs_demand[(day_of_week_historic[i] + 1)]",
                           stan::model::index_uni(j)) *
                          stan::math::pow(
                            stan::model::rvalue(hour_historic,
                              "hour_historic", stan::model::index_uni(i)),
                            (6 - j))));
        }
        current_statement__ = 11;
        mu_demand = (mu_demand +
                      stan::model::rvalue(
                        stan::model::rvalue(coeffs_demand, "coeffs_demand",
  stan::model::index_uni((stan::model::rvalue(day_of_week_historic,
                            "day_of_week_historic",
                            stan::model::index_uni(i)) + 1))),
                        "coeffs_demand[(day_of_week_historic[i] + 1)]",
                        stan::model::index_uni(6)));
      }
      current_statement__ = 20;
      for (int i = 1; i <= N_historic; ++i) {
        current_statement__ = 14;
        mu_generation = 0;
        current_statement__ = 17;
        for (int j = 1; j <= 3; ++j) {
          current_statement__ = 15;
          mu_generation = (mu_generation +
                            (stan::model::rvalue(coeffs_generation,
                               "coeffs_generation",
                               stan::model::index_uni(j)) *
                              stan::math::pow(
                                stan::model::rvalue(wind_speed_historic,
                                  "wind_speed_historic",
                                  stan::model::index_uni(i)), (4 - j))));
        }
        current_statement__ = 18;
        mu_generation = (mu_generation +
                          stan::model::rvalue(coeffs_generation,
                            "coeffs_generation", stan::model::index_uni(4)));
      }
      current_statement__ = 5;
      stan::model::assign(residual, stan::math::subtract(demand, generation),
        "assigning variable residual");
      current_statement__ = 27;
      for (int i = 1; i <= N_historic; ++i) {
        current_statement__ = 21;
        mu_prices = 0;
        current_statement__ = 24;
        for (int j = 1; j <= 7; ++j) {
          current_statement__ = 22;
          mu_prices = (mu_prices +
                        (stan::model::rvalue(coeffs_prices, "coeffs_prices",
                           stan::model::index_uni(j)) *
                          stan::math::pow(
                            stan::model::rvalue(residual, "residual",
                              stan::model::index_uni(i)), (8 - j))));
        }
        current_statement__ = 25;
        mu_prices = (mu_prices +
                      stan::model::rvalue(coeffs_prices, "coeffs_prices",
                        stan::model::index_uni(8)));
      }
      if (emit_transformed_parameters__) {
        out__.write(mu_demand);
        out__.write(mu_generation);
        out__.write(residual);
        out__.write(mu_prices);
      } 
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      double mu_demand_post = std::numeric_limits<double>::quiet_NaN();
      Eigen::Matrix<double, -1, 1> demand_post =
         Eigen::Matrix<double, -1, 1>::Constant(N_predict,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 37;
      for (int i = 1; i <= N_predict; ++i) {
        current_statement__ = 30;
        mu_demand_post = 0;
        current_statement__ = 33;
        for (int j = 1; j <= 5; ++j) {
          current_statement__ = 31;
          mu_demand_post = (mu_demand_post +
                             (stan::model::rvalue(
                                stan::model::rvalue(coeffs_demand, "coeffs_demand",
  stan::model::index_uni((stan::model::rvalue(day_of_week_predict,
                            "day_of_week_predict", stan::model::index_uni(i))
                           + 1))),
                                "coeffs_demand[(day_of_week_predict[i] + 1)]",
                                stan::model::index_uni(j)) *
                               stan::math::pow(
                                 stan::model::rvalue(hour_predict,
                                   "hour_predict", stan::model::index_uni(i)),
                                 (6 - j))));
        }
        current_statement__ = 34;
        mu_demand_post = (mu_demand_post +
                           stan::model::rvalue(
                             stan::model::rvalue(coeffs_demand, "coeffs_demand",
  stan::model::index_uni((stan::model::rvalue(day_of_week_predict,
                            "day_of_week_predict", stan::model::index_uni(i))
                           + 1))),
                             "coeffs_demand[(day_of_week_predict[i] + 1)]",
                             stan::model::index_uni(6)));
        current_statement__ = 35;
        stan::model::assign(demand_post,
          stan::math::normal_rng(mu_demand_post, 2800, base_rng__),
          "assigning variable demand_post", stan::model::index_uni(i));
      }
      double mu_generation_post = std::numeric_limits<double>::quiet_NaN();
      Eigen::Matrix<double, -1, 1> generation_post =
         Eigen::Matrix<double, -1, 1>::Constant(N_predict,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 47;
      for (int i = 1; i <= N_predict; ++i) {
        current_statement__ = 40;
        mu_generation_post = 0;
        current_statement__ = 43;
        for (int j = 1; j <= 3; ++j) {
          current_statement__ = 41;
          mu_generation_post = (mu_generation_post +
                                 (stan::model::rvalue(coeffs_generation,
                                    "coeffs_generation",
                                    stan::model::index_uni(j)) *
                                   stan::math::pow(
                                     stan::model::rvalue(wind_speed_predict,
                                       "wind_speed_predict",
                                       stan::model::index_uni(i)), (4 - j))));
        }
        current_statement__ = 44;
        mu_generation_post = (mu_generation_post +
                               stan::model::rvalue(coeffs_generation,
                                 "coeffs_generation",
                                 stan::model::index_uni(4)));
        current_statement__ = 45;
        stan::model::assign(generation_post,
          stan::math::normal_rng(mu_generation_post, 1400, base_rng__),
          "assigning variable generation_post", stan::model::index_uni(i));
      }
      Eigen::Matrix<double, -1, 1> residual_post =
         Eigen::Matrix<double, -1, 1>::Constant(N_predict,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 48;
      stan::model::assign(residual_post,
        stan::math::subtract(demand_post, generation_post),
        "assigning variable residual_post");
      double mu_prices_post = std::numeric_limits<double>::quiet_NaN();
      std::vector<double> posterior_prices =
         std::vector<double>(N_predict, 
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 58;
      for (int i = 1; i <= N_predict; ++i) {
        current_statement__ = 51;
        mu_prices_post = 0;
        current_statement__ = 54;
        for (int j = 1; j <= 7; ++j) {
          current_statement__ = 52;
          mu_prices_post = (mu_prices_post +
                             (stan::model::rvalue(coeffs_prices,
                                "coeffs_prices", stan::model::index_uni(j)) *
                               stan::math::pow(
                                 stan::model::rvalue(residual_post,
                                   "residual_post",
                                   stan::model::index_uni(i)), (8 - j))));
        }
        current_statement__ = 55;
        mu_prices_post = (mu_prices_post +
                           stan::model::rvalue(coeffs_prices,
                             "coeffs_prices", stan::model::index_uni(8)));
        current_statement__ = 56;
        stan::model::assign(posterior_prices,
          stan::math::normal_rng(mu_prices_post, 60, base_rng__),
          "assigning variable posterior_prices", stan::model::index_uni(i));
      }
      out__.write(mu_demand_post);
      out__.write(demand_post);
      out__.write(mu_generation_post);
      out__.write(generation_post);
      out__.write(residual_post);
      out__.write(mu_prices_post);
      out__.write(posterior_prices);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_std_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(VecVar& params_r__, VecI& params_i__,
                                   VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__, -1, 1> demand =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(N_historic,
           DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= N_historic; ++sym1__) {
        stan::model::assign(demand, in__.read<local_scalar_t__>(),
          "assigning variable demand", stan::model::index_uni(sym1__));
      }
      out__.write(demand);
      Eigen::Matrix<local_scalar_t__, -1, 1> generation =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(N_historic,
           DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= N_historic; ++sym1__) {
        stan::model::assign(generation, in__.read<local_scalar_t__>(),
          "assigning variable generation", stan::model::index_uni(sym1__));
      }
      out__.write(generation);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{"demand", "generation", "mu_demand",
      "mu_generation", "residual", "mu_prices", "mu_demand_post",
      "demand_post", "mu_generation_post", "generation_post",
      "residual_post", "mu_prices_post", "posterior_prices"};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{
                                                                   static_cast<size_t>(N_historic)
                                                                   },
      std::vector<size_t>{static_cast<size_t>(N_historic)},
      std::vector<size_t>{}, std::vector<size_t>{},
      std::vector<size_t>{static_cast<size_t>(N_historic)},
      std::vector<size_t>{}, std::vector<size_t>{},
      std::vector<size_t>{static_cast<size_t>(N_predict)},
      std::vector<size_t>{},
      std::vector<size_t>{static_cast<size_t>(N_predict)},
      std::vector<size_t>{static_cast<size_t>(N_predict)},
      std::vector<size_t>{},
      std::vector<size_t>{static_cast<size_t>(N_predict)}};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= N_historic; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "demand" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= N_historic; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "generation" + '.' + std::to_string(sym1__));
      } 
    }
    if (emit_transformed_parameters__) {
      param_names__.emplace_back(std::string() + "mu_demand");
      param_names__.emplace_back(std::string() + "mu_generation");
      for (int sym1__ = 1; sym1__ <= N_historic; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "residual" + '.' + std::to_string(sym1__));
        } 
      }
      param_names__.emplace_back(std::string() + "mu_prices");
    }
    
    if (emit_generated_quantities__) {
      param_names__.emplace_back(std::string() + "mu_demand_post");
      for (int sym1__ = 1; sym1__ <= N_predict; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "demand_post" + '.' + std::to_string(sym1__));
        } 
      }
      param_names__.emplace_back(std::string() + "mu_generation_post");
      for (int sym1__ = 1; sym1__ <= N_predict; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "generation_post" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_predict; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "residual_post" + '.' + std::to_string(sym1__));
        } 
      }
      param_names__.emplace_back(std::string() + "mu_prices_post");
      for (int sym1__ = 1; sym1__ <= N_predict; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "posterior_prices" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= N_historic; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "demand" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= N_historic; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "generation" + '.' + std::to_string(sym1__));
      } 
    }
    if (emit_transformed_parameters__) {
      param_names__.emplace_back(std::string() + "mu_demand");
      param_names__.emplace_back(std::string() + "mu_generation");
      for (int sym1__ = 1; sym1__ <= N_historic; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "residual" + '.' + std::to_string(sym1__));
        } 
      }
      param_names__.emplace_back(std::string() + "mu_prices");
    }
    
    if (emit_generated_quantities__) {
      param_names__.emplace_back(std::string() + "mu_demand_post");
      for (int sym1__ = 1; sym1__ <= N_predict; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "demand_post" + '.' + std::to_string(sym1__));
        } 
      }
      param_names__.emplace_back(std::string() + "mu_generation_post");
      for (int sym1__ = 1; sym1__ <= N_predict; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "generation_post" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_predict; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "residual_post" + '.' + std::to_string(sym1__));
        } 
      }
      param_names__.emplace_back(std::string() + "mu_prices_post");
      for (int sym1__ = 1; sym1__ <= N_predict; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "posterior_prices" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"demand\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_historic) + "},\"block\":\"parameters\"},{\"name\":\"generation\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_historic) + "},\"block\":\"parameters\"},{\"name\":\"mu_demand\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"mu_generation\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"residual\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_historic) + "},\"block\":\"transformed_parameters\"},{\"name\":\"mu_prices\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"mu_demand_post\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"demand_post\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_predict) + "},\"block\":\"generated_quantities\"},{\"name\":\"mu_generation_post\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"generation_post\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_predict) + "},\"block\":\"generated_quantities\"},{\"name\":\"residual_post\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_predict) + "},\"block\":\"generated_quantities\"},{\"name\":\"mu_prices_post\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"posterior_prices\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_predict) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"}]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"demand\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_historic) + "},\"block\":\"parameters\"},{\"name\":\"generation\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_historic) + "},\"block\":\"parameters\"},{\"name\":\"mu_demand\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"mu_generation\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"residual\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_historic) + "},\"block\":\"transformed_parameters\"},{\"name\":\"mu_prices\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"mu_demand_post\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"demand_post\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_predict) + "},\"block\":\"generated_quantities\"},{\"name\":\"mu_generation_post\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"generation_post\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_predict) + "},\"block\":\"generated_quantities\"},{\"name\":\"residual_post\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_predict) + "},\"block\":\"generated_quantities\"},{\"name\":\"mu_prices_post\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"posterior_prices\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_predict) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"}]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  (N_historic + N_historic);
      const size_t num_transformed = (((1 + 1) +
                                                                    N_historic)
                                                                    + 1);
      const size_t num_gen_quantities = 
  ((((((1 + N_predict) + 1) + N_predict) + N_predict) + 1) + N_predict);
      std::vector<double> vars_vec(num_params__
       + (emit_transformed_parameters * num_transformed)
       + (emit_generated_quantities * num_gen_quantities));
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        vars_vec.data(), vars_vec.size());
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  (N_historic + N_historic);
      const size_t num_transformed = (((1 + 1) +
                                                                    N_historic)
                                                                    + 1);
      const size_t num_gen_quantities = 
  ((((((1 + N_predict) + 1) + N_predict) + N_predict) + 1) + N_predict);
      vars.resize(num_params__
        + (emit_transformed_parameters * num_transformed)
        + (emit_generated_quantities * num_gen_quantities));
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }

  inline void transform_inits(const stan::io::var_context& context,
                              std::vector<int>& params_i,
                              std::vector<double>& vars,
                              std::ostream* pstream__ = nullptr) const {
     constexpr std::array<const char*, 2> names__{"demand", "generation"};
      const std::array<Eigen::Index, 2> constrain_param_sizes__{N_historic,
       N_historic};
      const auto num_constrained_params__ = std::accumulate(
        constrain_param_sizes__.begin(), constrain_param_sizes__.end(), 0);
    
     std::vector<double> params_r_flat__(num_constrained_params__);
     Eigen::Index size_iter__ = 0;
     Eigen::Index flat_iter__ = 0;
     for (auto&& param_name__ : names__) {
       const auto param_vec__ = context.vals_r(param_name__);
       for (Eigen::Index i = 0; i < constrain_param_sizes__[size_iter__]; ++i) {
         params_r_flat__[flat_iter__] = param_vec__[i];
         ++flat_iter__;
       }
       ++size_iter__;
     }
     vars.resize(num_params_r__);
     transform_inits_impl(params_r_flat__, params_i, vars, pstream__);
    } // transform_inits() 
    
};
}
using stan_model = posterior_model_namespace::posterior_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return posterior_model_namespace::profiles__;
}

#endif


