
// Code generated by stanc v2.29.0
#include <stan/model/model_header.hpp>
namespace final_posterior_model3_model_namespace {

using stan::model::model_base_crtp;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 62> locations_array__ = 
{" (found before start of program)",
 " (in '/home/ProjektDataAnalytics/Comparison_of_models/final_posterior_model3.stan', line 17, column 4 to column 16)",
 " (in '/home/ProjektDataAnalytics/Comparison_of_models/final_posterior_model3.stan', line 18, column 4 to column 16)",
 " (in '/home/ProjektDataAnalytics/Comparison_of_models/final_posterior_model3.stan', line 19, column 4 to column 15)",
 " (in '/home/ProjektDataAnalytics/Comparison_of_models/final_posterior_model3.stan', line 20, column 4 to column 15)",
 " (in '/home/ProjektDataAnalytics/Comparison_of_models/final_posterior_model3.stan', line 21, column 4 to column 23)",
 " (in '/home/ProjektDataAnalytics/Comparison_of_models/final_posterior_model3.stan', line 22, column 4 to column 41)",
 " (in '/home/ProjektDataAnalytics/Comparison_of_models/final_posterior_model3.stan', line 24, column 4 to column 14)",
 " (in '/home/ProjektDataAnalytics/Comparison_of_models/final_posterior_model3.stan', line 25, column 4 to column 14)",
 " (in '/home/ProjektDataAnalytics/Comparison_of_models/final_posterior_model3.stan', line 26, column 4 to column 27)",
 " (in '/home/ProjektDataAnalytics/Comparison_of_models/final_posterior_model3.stan', line 27, column 4 to column 45)",
 " (in '/home/ProjektDataAnalytics/Comparison_of_models/final_posterior_model3.stan', line 29, column 4 to column 18)",
 " (in '/home/ProjektDataAnalytics/Comparison_of_models/final_posterior_model3.stan', line 30, column 4 to column 22)",
 " (in '/home/ProjektDataAnalytics/Comparison_of_models/final_posterior_model3.stan', line 31, column 4 to column 23)",
 " (in '/home/ProjektDataAnalytics/Comparison_of_models/final_posterior_model3.stan', line 59, column 4 to column 25)",
 " (in '/home/ProjektDataAnalytics/Comparison_of_models/final_posterior_model3.stan', line 60, column 4 to column 29)",
 " (in '/home/ProjektDataAnalytics/Comparison_of_models/final_posterior_model3.stan', line 61, column 4 to column 25)",
 " (in '/home/ProjektDataAnalytics/Comparison_of_models/final_posterior_model3.stan', line 63, column 8 to column 33)",
 " (in '/home/ProjektDataAnalytics/Comparison_of_models/final_posterior_model3.stan', line 64, column 8 to column 133)",
 " (in '/home/ProjektDataAnalytics/Comparison_of_models/final_posterior_model3.stan', line 65, column 8 to column 114)",
 " (in '/home/ProjektDataAnalytics/Comparison_of_models/final_posterior_model3.stan', line 66, column 8 to column 105)",
 " (in '/home/ProjektDataAnalytics/Comparison_of_models/final_posterior_model3.stan', line 62, column 19 to line 67, column 5)",
 " (in '/home/ProjektDataAnalytics/Comparison_of_models/final_posterior_model3.stan', line 62, column 4 to line 67, column 5)",
 " (in '/home/ProjektDataAnalytics/Comparison_of_models/final_posterior_model3.stan', line 35, column 8 to column 33)",
 " (in '/home/ProjektDataAnalytics/Comparison_of_models/final_posterior_model3.stan', line 36, column 8 to column 33)",
 " (in '/home/ProjektDataAnalytics/Comparison_of_models/final_posterior_model3.stan', line 37, column 8 to column 33)",
 " (in '/home/ProjektDataAnalytics/Comparison_of_models/final_posterior_model3.stan', line 38, column 8 to column 34)",
 " (in '/home/ProjektDataAnalytics/Comparison_of_models/final_posterior_model3.stan', line 39, column 8 to column 44)",
 " (in '/home/ProjektDataAnalytics/Comparison_of_models/final_posterior_model3.stan', line 41, column 8 to column 31)",
 " (in '/home/ProjektDataAnalytics/Comparison_of_models/final_posterior_model3.stan', line 42, column 8 to column 33)",
 " (in '/home/ProjektDataAnalytics/Comparison_of_models/final_posterior_model3.stan', line 43, column 8 to column 46)",
 " (in '/home/ProjektDataAnalytics/Comparison_of_models/final_posterior_model3.stan', line 45, column 8 to column 40)",
 " (in '/home/ProjektDataAnalytics/Comparison_of_models/final_posterior_model3.stan', line 46, column 8 to column 46)",
 " (in '/home/ProjektDataAnalytics/Comparison_of_models/final_posterior_model3.stan', line 47, column 8 to column 39)",
 " (in '/home/ProjektDataAnalytics/Comparison_of_models/final_posterior_model3.stan', line 50, column 8 to column 33)",
 " (in '/home/ProjektDataAnalytics/Comparison_of_models/final_posterior_model3.stan', line 51, column 8 to column 155)",
 " (in '/home/ProjektDataAnalytics/Comparison_of_models/final_posterior_model3.stan', line 52, column 8 to column 136)",
 " (in '/home/ProjektDataAnalytics/Comparison_of_models/final_posterior_model3.stan', line 53, column 8 to column 125)",
 " (in '/home/ProjektDataAnalytics/Comparison_of_models/final_posterior_model3.stan', line 54, column 8 to column 140)",
 " (in '/home/ProjektDataAnalytics/Comparison_of_models/final_posterior_model3.stan', line 49, column 27 to line 55, column 5)",
 " (in '/home/ProjektDataAnalytics/Comparison_of_models/final_posterior_model3.stan', line 49, column 4 to line 55, column 5)",
 " (in '/home/ProjektDataAnalytics/Comparison_of_models/final_posterior_model3.stan', line 3, column 4 to column 27)",
 " (in '/home/ProjektDataAnalytics/Comparison_of_models/final_posterior_model3.stan', line 4, column 10 to column 19)",
 " (in '/home/ProjektDataAnalytics/Comparison_of_models/final_posterior_model3.stan', line 4, column 4 to column 64)",
 " (in '/home/ProjektDataAnalytics/Comparison_of_models/final_posterior_model3.stan', line 5, column 10 to column 19)",
 " (in '/home/ProjektDataAnalytics/Comparison_of_models/final_posterior_model3.stan', line 5, column 4 to column 58)",
 " (in '/home/ProjektDataAnalytics/Comparison_of_models/final_posterior_model3.stan', line 6, column 10 to column 19)",
 " (in '/home/ProjektDataAnalytics/Comparison_of_models/final_posterior_model3.stan', line 6, column 4 to column 46)",
 " (in '/home/ProjektDataAnalytics/Comparison_of_models/final_posterior_model3.stan', line 7, column 10 to column 19)",
 " (in '/home/ProjektDataAnalytics/Comparison_of_models/final_posterior_model3.stan', line 7, column 4 to column 41)",
 " (in '/home/ProjektDataAnalytics/Comparison_of_models/final_posterior_model3.stan', line 9, column 4 to column 19)",
 " (in '/home/ProjektDataAnalytics/Comparison_of_models/final_posterior_model3.stan', line 10, column 10 to column 11)",
 " (in '/home/ProjektDataAnalytics/Comparison_of_models/final_posterior_model3.stan', line 10, column 4 to column 47)",
 " (in '/home/ProjektDataAnalytics/Comparison_of_models/final_posterior_model3.stan', line 11, column 10 to column 11)",
 " (in '/home/ProjektDataAnalytics/Comparison_of_models/final_posterior_model3.stan', line 11, column 4 to column 41)",
 " (in '/home/ProjektDataAnalytics/Comparison_of_models/final_posterior_model3.stan', line 12, column 10 to column 11)",
 " (in '/home/ProjektDataAnalytics/Comparison_of_models/final_posterior_model3.stan', line 12, column 4 to column 29)",
 " (in '/home/ProjektDataAnalytics/Comparison_of_models/final_posterior_model3.stan', line 22, column 10 to column 19)",
 " (in '/home/ProjektDataAnalytics/Comparison_of_models/final_posterior_model3.stan', line 27, column 10 to column 19)",
 " (in '/home/ProjektDataAnalytics/Comparison_of_models/final_posterior_model3.stan', line 59, column 10 to column 11)",
 " (in '/home/ProjektDataAnalytics/Comparison_of_models/final_posterior_model3.stan', line 60, column 10 to column 11)",
 " (in '/home/ProjektDataAnalytics/Comparison_of_models/final_posterior_model3.stan', line 61, column 10 to column 11)"};




class final_posterior_model3_model final : public model_base_crtp<final_posterior_model3_model> {

 private:
  int N_samples;
  std::vector<int> day_of_week_historic;
  std::vector<int> hour_historic;
  std::vector<double> wind_speed_historic;
  std::vector<double> prices_samples;
  int N;
  std::vector<int> day_of_week;
  std::vector<int> hour;
  std::vector<double> wind_speed; 
  
 
 public:
  ~final_posterior_model3_model() { }
  
  inline std::string model_name() const final { return "final_posterior_model3_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.29.0", "stancflags = "};
  }
  
  
  final_posterior_model3_model(stan::io::var_context& context__,
                               unsigned int random_seed__ = 0,
                               std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "final_posterior_model3_model_namespace::final_posterior_model3_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 41;
      context__.validate_dims("data initialization","N_samples","int",
           std::vector<size_t>{});
      N_samples = std::numeric_limits<int>::min();
      
      
      current_statement__ = 41;
      N_samples = context__.vals_i("N_samples")[(1 - 1)];
      current_statement__ = 41;
      stan::math::check_greater_or_equal(function__, "N_samples", N_samples,
                                            0);
      current_statement__ = 42;
      stan::math::validate_non_negative_index("day_of_week_historic",
                                              "N_samples", N_samples);
      current_statement__ = 43;
      context__.validate_dims("data initialization","day_of_week_historic",
          "int", std::vector<size_t>{static_cast<size_t>(N_samples)});
      day_of_week_historic = 
        std::vector<int>(N_samples, std::numeric_limits<int>::min());
      
      
      current_statement__ = 43;
      day_of_week_historic = context__.vals_i("day_of_week_historic");
      current_statement__ = 43;
      stan::math::check_greater_or_equal(function__, "day_of_week_historic",
                                            day_of_week_historic, 0);
      current_statement__ = 43;
      stan::math::check_less_or_equal(function__, "day_of_week_historic",
                                         day_of_week_historic, 6);
      current_statement__ = 44;
      stan::math::validate_non_negative_index("hour_historic", "N_samples",
                                              N_samples);
      current_statement__ = 45;
      context__.validate_dims("data initialization","hour_historic","int",
           std::vector<size_t>{static_cast<size_t>(N_samples)});
      hour_historic = 
        std::vector<int>(N_samples, std::numeric_limits<int>::min());
      
      
      current_statement__ = 45;
      hour_historic = context__.vals_i("hour_historic");
      current_statement__ = 45;
      stan::math::check_greater_or_equal(function__, "hour_historic",
                                            hour_historic, 1);
      current_statement__ = 45;
      stan::math::check_less_or_equal(function__, "hour_historic",
                                         hour_historic, 24);
      current_statement__ = 46;
      stan::math::validate_non_negative_index("wind_speed_historic",
                                              "N_samples", N_samples);
      current_statement__ = 47;
      context__.validate_dims("data initialization","wind_speed_historic",
          "double", std::vector<size_t>{static_cast<size_t>(N_samples)});
      wind_speed_historic = 
        std::vector<double>(N_samples, 
          std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 47;
      wind_speed_historic = context__.vals_r("wind_speed_historic");
      current_statement__ = 48;
      stan::math::validate_non_negative_index("prices_samples", "N_samples",
                                              N_samples);
      current_statement__ = 49;
      context__.validate_dims("data initialization","prices_samples",
          "double", std::vector<size_t>{static_cast<size_t>(N_samples)});
      prices_samples = 
        std::vector<double>(N_samples, 
          std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 49;
      prices_samples = context__.vals_r("prices_samples");
      current_statement__ = 50;
      context__.validate_dims("data initialization","N","int",
           std::vector<size_t>{});
      N = std::numeric_limits<int>::min();
      
      
      current_statement__ = 50;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 50;
      stan::math::check_greater_or_equal(function__, "N", N, 0);
      current_statement__ = 51;
      stan::math::validate_non_negative_index("day_of_week", "N", N);
      current_statement__ = 52;
      context__.validate_dims("data initialization","day_of_week","int",
           std::vector<size_t>{static_cast<size_t>(N)});
      day_of_week = std::vector<int>(N, std::numeric_limits<int>::min());
      
      
      current_statement__ = 52;
      day_of_week = context__.vals_i("day_of_week");
      current_statement__ = 52;
      stan::math::check_greater_or_equal(function__, "day_of_week",
                                            day_of_week, 0);
      current_statement__ = 52;
      stan::math::check_less_or_equal(function__, "day_of_week", day_of_week,
                                         6);
      current_statement__ = 53;
      stan::math::validate_non_negative_index("hour", "N", N);
      current_statement__ = 54;
      context__.validate_dims("data initialization","hour","int",
           std::vector<size_t>{static_cast<size_t>(N)});
      hour = std::vector<int>(N, std::numeric_limits<int>::min());
      
      
      current_statement__ = 54;
      hour = context__.vals_i("hour");
      current_statement__ = 54;
      stan::math::check_greater_or_equal(function__, "hour", hour, 1);
      current_statement__ = 54;
      stan::math::check_less_or_equal(function__, "hour", hour, 24);
      current_statement__ = 55;
      stan::math::validate_non_negative_index("wind_speed", "N", N);
      current_statement__ = 56;
      context__.validate_dims("data initialization","wind_speed","double",
           std::vector<size_t>{static_cast<size_t>(N)});
      wind_speed = 
        std::vector<double>(N, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 56;
      wind_speed = context__.vals_r("wind_speed");
      current_statement__ = 57;
      stan::math::validate_non_negative_index("demand_samples", "N_samples",
                                              N_samples);
      current_statement__ = 58;
      stan::math::validate_non_negative_index("generation_samples",
                                              "N_samples", N_samples);
      current_statement__ = 59;
      stan::math::validate_non_negative_index("demand", "N", N);
      current_statement__ = 60;
      stan::math::validate_non_negative_index("generation", "N", N);
      current_statement__ = 61;
      stan::math::validate_non_negative_index("prices", "N", N);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = 1 + 1 + 1 + 1 + 1 + N_samples + 1 + 1 + 1 + N_samples
       + 1 + 1 + 1;
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "final_posterior_model3_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      local_scalar_t__ a_hour = DUMMY_VAR__;
      current_statement__ = 1;
      a_hour = in__.template read<local_scalar_t__>();
      local_scalar_t__ b_hour = DUMMY_VAR__;
      current_statement__ = 2;
      b_hour = in__.template read<local_scalar_t__>();
      local_scalar_t__ a_day = DUMMY_VAR__;
      current_statement__ = 3;
      a_day = in__.template read<local_scalar_t__>();
      local_scalar_t__ b_day = DUMMY_VAR__;
      current_statement__ = 4;
      b_day = in__.template read<local_scalar_t__>();
      local_scalar_t__ offset_demand = DUMMY_VAR__;
      current_statement__ = 5;
      offset_demand = in__.template read<local_scalar_t__>();
      std::vector<local_scalar_t__> demand_samples =
         std::vector<local_scalar_t__>(N_samples, DUMMY_VAR__);
      current_statement__ = 6;
      demand_samples = in__.template read<std::vector<local_scalar_t__>>(
                         N_samples);
      local_scalar_t__ a_ws = DUMMY_VAR__;
      current_statement__ = 7;
      a_ws = in__.template read<local_scalar_t__>();
      local_scalar_t__ b_ws = DUMMY_VAR__;
      current_statement__ = 8;
      b_ws = in__.template read<local_scalar_t__>();
      local_scalar_t__ offset_generation = DUMMY_VAR__;
      current_statement__ = 9;
      offset_generation = in__.template read<local_scalar_t__>();
      std::vector<local_scalar_t__> generation_samples =
         std::vector<local_scalar_t__>(N_samples, DUMMY_VAR__);
      current_statement__ = 10;
      generation_samples = in__.template read<std::vector<local_scalar_t__>>(
                             N_samples);
      local_scalar_t__ a_demand = DUMMY_VAR__;
      current_statement__ = 11;
      a_demand = in__.template read<local_scalar_t__>();
      local_scalar_t__ a_generation = DUMMY_VAR__;
      current_statement__ = 12;
      a_generation = in__.template read<local_scalar_t__>();
      local_scalar_t__ offset_prices = DUMMY_VAR__;
      current_statement__ = 13;
      offset_prices = in__.template read<local_scalar_t__>();
      {
        current_statement__ = 23;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(a_hour, -32, 10));
        current_statement__ = 24;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(b_hour, 980, 10));
        current_statement__ = 25;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(a_day, -300, 20));
        current_statement__ = 26;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(b_day, 1200, 100));
        current_statement__ = 27;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(offset_demand, 14500, 2000));
        current_statement__ = 28;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(a_ws, -56, 10));
        current_statement__ = 29;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(b_ws, 1323, 100));
        current_statement__ = 30;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(offset_generation, 3449, 600));
        current_statement__ = 31;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(a_demand, 0.011, 0.001));
        current_statement__ = 32;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(a_generation, -0.008, 0.0001));
        current_statement__ = 33;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(offset_prices, 51, 10));
        current_statement__ = 40;
        for (int i = 1; i <= N_samples; ++i) {
          int day = std::numeric_limits<int>::min();
          current_statement__ = 34;
          day = stan::model::rvalue(day_of_week, "day_of_week",
                  stan::model::index_uni(i));
          current_statement__ = 35;
          lp_accum__.add(
            stan::math::normal_lpdf<propto__>(
              stan::model::rvalue(demand_samples, "demand_samples",
                stan::model::index_uni(i)),
              (((((a_hour *
                    stan::math::pow(
                      stan::model::rvalue(hour_historic, "hour_historic",
                        stan::model::index_uni(i)), 2)) +
                   (b_hour *
                     stan::model::rvalue(hour_historic, "hour_historic",
                       stan::model::index_uni(i)))) +
                  (a_day * stan::math::pow(day, 2))) + (b_day * day)) +
                offset_demand), 100));
          current_statement__ = 36;
          lp_accum__.add(
            stan::math::normal_lpdf<propto__>(
              stan::model::rvalue(generation_samples, "generation_samples",
                stan::model::index_uni(i)),
              (((a_ws *
                  stan::math::pow(
                    stan::model::rvalue(wind_speed_historic,
                      "wind_speed_historic", stan::model::index_uni(i)), 2))
                 +
                 (b_ws *
                   stan::model::rvalue(wind_speed_historic,
                     "wind_speed_historic", stan::model::index_uni(i)))) +
                offset_generation), 1000));
          current_statement__ = 37;
          lp_accum__.add(
            stan::math::normal_lpdf<propto__>(
              stan::model::rvalue(prices_samples, "prices_samples",
                stan::model::index_uni(i)),
              (((a_demand *
                  stan::model::rvalue(demand_samples, "demand_samples",
                    stan::model::index_uni(i))) +
                 (a_generation *
                   stan::model::rvalue(generation_samples,
                     "generation_samples", stan::model::index_uni(i)))) +
                offset_prices), 100));
          current_statement__ = 38;
          lp_accum__.add(
            stan::math::normal_lpdf<false>(
              stan::model::rvalue(prices_samples, "prices_samples",
                stan::model::index_uni(i)),
              (((a_demand *
                  stan::model::rvalue(demand_samples, "demand_samples",
                    stan::model::index_uni(i))) +
                 (a_generation *
                   stan::model::rvalue(generation_samples,
                     "generation_samples", stan::model::index_uni(i)))) +
                offset_prices), 100));
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    (void) propto__;
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "final_posterior_model3_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      double a_hour = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 1;
      a_hour = in__.template read<local_scalar_t__>();
      double b_hour = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 2;
      b_hour = in__.template read<local_scalar_t__>();
      double a_day = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 3;
      a_day = in__.template read<local_scalar_t__>();
      double b_day = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 4;
      b_day = in__.template read<local_scalar_t__>();
      double offset_demand = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 5;
      offset_demand = in__.template read<local_scalar_t__>();
      std::vector<double> demand_samples =
         std::vector<double>(N_samples, 
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 6;
      demand_samples = in__.template read<std::vector<local_scalar_t__>>(
                         N_samples);
      double a_ws = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 7;
      a_ws = in__.template read<local_scalar_t__>();
      double b_ws = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 8;
      b_ws = in__.template read<local_scalar_t__>();
      double offset_generation = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 9;
      offset_generation = in__.template read<local_scalar_t__>();
      std::vector<double> generation_samples =
         std::vector<double>(N_samples, 
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 10;
      generation_samples = in__.template read<std::vector<local_scalar_t__>>(
                             N_samples);
      double a_demand = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 11;
      a_demand = in__.template read<local_scalar_t__>();
      double a_generation = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 12;
      a_generation = in__.template read<local_scalar_t__>();
      double offset_prices = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 13;
      offset_prices = in__.template read<local_scalar_t__>();
      out__.write(a_hour);
      out__.write(b_hour);
      out__.write(a_day);
      out__.write(b_day);
      out__.write(offset_demand);
      out__.write(demand_samples);
      out__.write(a_ws);
      out__.write(b_ws);
      out__.write(offset_generation);
      out__.write(generation_samples);
      out__.write(a_demand);
      out__.write(a_generation);
      out__.write(offset_prices);
      if (stan::math::logical_negation((stan::math::primitive_value(
            emit_transformed_parameters__) || stan::math::primitive_value(
            emit_generated_quantities__)))) {
        return ;
      } 
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      std::vector<double> demand =
         std::vector<double>(N, std::numeric_limits<double>::quiet_NaN());
      std::vector<double> generation =
         std::vector<double>(N, std::numeric_limits<double>::quiet_NaN());
      std::vector<double> prices =
         std::vector<double>(N, std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 22;
      for (int i = 1; i <= N; ++i) {
        int day = std::numeric_limits<int>::min();
        current_statement__ = 17;
        day = stan::model::rvalue(day_of_week, "day_of_week",
                stan::model::index_uni(i));
        current_statement__ = 18;
        stan::model::assign(demand,
          stan::math::normal_rng(
            (((((a_hour *
                  stan::math::pow(
                    stan::model::rvalue(hour, "hour",
                      stan::model::index_uni(i)), 2)) +
                 (b_hour *
                   stan::model::rvalue(hour, "hour",
                     stan::model::index_uni(i)))) +
                (a_day * stan::math::pow(day, 2))) + (b_day * day)) +
              offset_demand), 100, base_rng__),
          "assigning variable demand", stan::model::index_uni(i));
        current_statement__ = 19;
        stan::model::assign(generation,
          stan::math::normal_rng(
            (((a_ws *
                stan::math::pow(
                  stan::model::rvalue(wind_speed, "wind_speed",
                    stan::model::index_uni(i)), 2)) +
               (b_ws *
                 stan::model::rvalue(wind_speed, "wind_speed",
                   stan::model::index_uni(i)))) + offset_generation), 1000,
            base_rng__),
          "assigning variable generation", stan::model::index_uni(i));
        current_statement__ = 20;
        stan::model::assign(prices,
          stan::math::normal_rng(
            (((a_demand *
                stan::model::rvalue(demand, "demand",
                  stan::model::index_uni(i))) +
               (a_generation *
                 stan::model::rvalue(generation, "generation",
                   stan::model::index_uni(i)))) + offset_prices), 100,
            base_rng__),
          "assigning variable prices", stan::model::index_uni(i));
      }
      out__.write(demand);
      out__.write(generation);
      out__.write(prices);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_std_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(VecVar& params_r__, VecI& params_i__,
                                   VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      local_scalar_t__ a_hour = DUMMY_VAR__;
      a_hour = in__.read<local_scalar_t__>();
      out__.write(a_hour);
      local_scalar_t__ b_hour = DUMMY_VAR__;
      b_hour = in__.read<local_scalar_t__>();
      out__.write(b_hour);
      local_scalar_t__ a_day = DUMMY_VAR__;
      a_day = in__.read<local_scalar_t__>();
      out__.write(a_day);
      local_scalar_t__ b_day = DUMMY_VAR__;
      b_day = in__.read<local_scalar_t__>();
      out__.write(b_day);
      local_scalar_t__ offset_demand = DUMMY_VAR__;
      offset_demand = in__.read<local_scalar_t__>();
      out__.write(offset_demand);
      std::vector<local_scalar_t__> demand_samples =
         std::vector<local_scalar_t__>(N_samples, DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= N_samples; ++sym1__) {
        demand_samples[(sym1__ - 1)] = in__.read<local_scalar_t__>();
      }
      out__.write(demand_samples);
      local_scalar_t__ a_ws = DUMMY_VAR__;
      a_ws = in__.read<local_scalar_t__>();
      out__.write(a_ws);
      local_scalar_t__ b_ws = DUMMY_VAR__;
      b_ws = in__.read<local_scalar_t__>();
      out__.write(b_ws);
      local_scalar_t__ offset_generation = DUMMY_VAR__;
      offset_generation = in__.read<local_scalar_t__>();
      out__.write(offset_generation);
      std::vector<local_scalar_t__> generation_samples =
         std::vector<local_scalar_t__>(N_samples, DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= N_samples; ++sym1__) {
        generation_samples[(sym1__ - 1)] = in__.read<local_scalar_t__>();
      }
      out__.write(generation_samples);
      local_scalar_t__ a_demand = DUMMY_VAR__;
      a_demand = in__.read<local_scalar_t__>();
      out__.write(a_demand);
      local_scalar_t__ a_generation = DUMMY_VAR__;
      a_generation = in__.read<local_scalar_t__>();
      out__.write(a_generation);
      local_scalar_t__ offset_prices = DUMMY_VAR__;
      offset_prices = in__.read<local_scalar_t__>();
      out__.write(offset_prices);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{"a_hour", "b_hour", "a_day", "b_day",
      "offset_demand", "demand_samples", "a_ws", "b_ws", "offset_generation",
      "generation_samples", "a_demand", "a_generation", "offset_prices",
      "demand", "generation", "prices"};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{},
      std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{},
      std::vector<size_t>{static_cast<size_t>(N_samples)},
      std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{static_cast<size_t>(N_samples)},
      std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(N)}};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "a_hour");
    param_names__.emplace_back(std::string() + "b_hour");
    param_names__.emplace_back(std::string() + "a_day");
    param_names__.emplace_back(std::string() + "b_day");
    param_names__.emplace_back(std::string() + "offset_demand");
    for (int sym1__ = 1; sym1__ <= N_samples; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "demand_samples" + '.' + std::to_string(sym1__));
      } 
    }
    param_names__.emplace_back(std::string() + "a_ws");
    param_names__.emplace_back(std::string() + "b_ws");
    param_names__.emplace_back(std::string() + "offset_generation");
    for (int sym1__ = 1; sym1__ <= N_samples; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "generation_samples" + '.' + std::to_string(sym1__));
      } 
    }
    param_names__.emplace_back(std::string() + "a_demand");
    param_names__.emplace_back(std::string() + "a_generation");
    param_names__.emplace_back(std::string() + "offset_prices");
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "demand" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "generation" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "prices" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "a_hour");
    param_names__.emplace_back(std::string() + "b_hour");
    param_names__.emplace_back(std::string() + "a_day");
    param_names__.emplace_back(std::string() + "b_day");
    param_names__.emplace_back(std::string() + "offset_demand");
    for (int sym1__ = 1; sym1__ <= N_samples; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "demand_samples" + '.' + std::to_string(sym1__));
      } 
    }
    param_names__.emplace_back(std::string() + "a_ws");
    param_names__.emplace_back(std::string() + "b_ws");
    param_names__.emplace_back(std::string() + "offset_generation");
    for (int sym1__ = 1; sym1__ <= N_samples; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "generation_samples" + '.' + std::to_string(sym1__));
      } 
    }
    param_names__.emplace_back(std::string() + "a_demand");
    param_names__.emplace_back(std::string() + "a_generation");
    param_names__.emplace_back(std::string() + "offset_prices");
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "demand" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "generation" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "prices" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"a_hour\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"b_hour\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"a_day\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"b_day\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"offset_demand\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"demand_samples\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_samples) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"a_ws\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"b_ws\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"offset_generation\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"generation_samples\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_samples) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"a_demand\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"a_generation\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"offset_prices\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"demand\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"generation\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"prices\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"}]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"a_hour\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"b_hour\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"a_day\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"b_day\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"offset_demand\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"demand_samples\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_samples) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"a_ws\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"b_ws\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"offset_generation\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"generation_samples\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_samples) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"a_demand\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"a_generation\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"offset_prices\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"demand\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"generation\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"prices\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"}]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  ((((((((((((1 + 1) + 1) + 1) + 1) + N_samples) + 1) + 1) + 1) + N_samples)
      + 1) + 1) + 1);
      const size_t num_transformed = 0;
      const size_t num_gen_quantities = 
  ((N + N) + N);
      std::vector<double> vars_vec(num_params__
       + (emit_transformed_parameters * num_transformed)
       + (emit_generated_quantities * num_gen_quantities));
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        vars_vec.data(), vars_vec.size());
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  ((((((((((((1 + 1) + 1) + 1) + 1) + N_samples) + 1) + 1) + 1) + N_samples)
      + 1) + 1) + 1);
      const size_t num_transformed = 0;
      const size_t num_gen_quantities = 
  ((N + N) + N);
      vars.resize(num_params__
        + (emit_transformed_parameters * num_transformed)
        + (emit_generated_quantities * num_gen_quantities));
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }

  inline void transform_inits(const stan::io::var_context& context,
                              std::vector<int>& params_i,
                              std::vector<double>& vars,
                              std::ostream* pstream__ = nullptr) const {
     constexpr std::array<const char*, 13> names__{"a_hour", "b_hour",
      "a_day", "b_day", "offset_demand", "demand_samples", "a_ws", "b_ws",
      "offset_generation", "generation_samples", "a_demand", "a_generation",
      "offset_prices"};
      const std::array<Eigen::Index, 13> constrain_param_sizes__{1, 1, 
       1, 1, 1, N_samples, 1, 1, 1, N_samples, 1, 1, 1};
      const auto num_constrained_params__ = std::accumulate(
        constrain_param_sizes__.begin(), constrain_param_sizes__.end(), 0);
    
     std::vector<double> params_r_flat__(num_constrained_params__);
     Eigen::Index size_iter__ = 0;
     Eigen::Index flat_iter__ = 0;
     for (auto&& param_name__ : names__) {
       const auto param_vec__ = context.vals_r(param_name__);
       for (Eigen::Index i = 0; i < constrain_param_sizes__[size_iter__]; ++i) {
         params_r_flat__[flat_iter__] = param_vec__[i];
         ++flat_iter__;
       }
       ++size_iter__;
     }
     vars.resize(num_params_r__);
     transform_inits_impl(params_r_flat__, params_i, vars, pstream__);
    } // transform_inits() 
    
};
}

using stan_model = final_posterior_model3_model_namespace::final_posterior_model3_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return final_posterior_model3_model_namespace::profiles__;
}

#endif


